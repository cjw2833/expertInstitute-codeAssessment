{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-echarts\";\nexport let AssetCardComponent = /*#__PURE__*/(() => {\n  class AssetCardComponent {\n    constructor() {\n      /**\r\n       * @name assetChartData\r\n       * @description Currently selected assets price history and time interval(m1, m5, m15, m30, h1, h2, h6, h12, d1)\r\n       * Sent by parents components: landing component,\r\n       */\n      this.assetChartData = [];\n      /**\r\n       * @name options\r\n       * @description chart options design set up\r\n       */\n\n      this.options = {};\n    }\n\n    ngOnInit() {\n      console.log(this.assetChartData); // this.options.series[0].data = this.assetChartData;\n\n      this.options = {\n        legend: {\n          data: ['Currency Price'],\n          align: 'left'\n        },\n        tooltip: {},\n        xAxis: {\n          data: this.formatTimestampToDate(this.assetChartData),\n          // data: ['2017-10-20', '2017-10-21', '2017-10-22', '2017-10-23','2017-10-24', '2017-10-25', '2017-10-26', '2017-10-27'],\n          silent: false,\n          splitLine: {\n            show: false\n          }\n        },\n        yAxis: {},\n        series: [{\n          name: 'Currency Price',\n          type: 'bar',\n          data: [20, 34, -10, -38, 40, 35, -30, 50],\n          animationDelay: idx => idx * 10\n        }],\n        animationEasing: 'elasticOut',\n        animationDelayUpdate: idx => idx * 5\n      };\n    }\n    /**\r\n     * Calculates the average closing price of the given(candleCount) Candlesticks\r\n     * @param dayCount\r\n     * @param data\r\n     * @returns result\r\n     *\r\n    public calculateMovingAverage(candleCount: number, candleData: AssetCandleData[]) {\r\n      let result = [];\r\n      for (let i = 0, len = candleData.length; i < len; i++) {\r\n        if (i < candleCount) {\r\n          result.push('-');\r\n          continue;\r\n        }\r\n        let sum = 0;\r\n        for (let j = 0; j < candleCount; j++) {\r\n          sum += candleData[i - j].close;\r\n        }\r\n        result.push((sum / candleCount).toFixed(2));\r\n      }\r\n      return result;\r\n    }\r\n    */\n\n    /**\r\n     * Helper function to parse and format date data for asset chart interface from data array\r\n     * @param dayCount\r\n     * @param data\r\n     * @returns result\r\n     */\n\n\n    formatTimestampToDate(assetData) {\n      let result = [];\n\n      for (let i = 0; i < assetData.length; i++) {\n        let d = new Date(assetData[i].date);\n        let s = d.getMonth() + 1 + '-' + d.getDate(); // Format: '04-28' aka my birthday :)\n\n        result.push(s);\n      }\n\n      console.log(result);\n      return result; // const date: Date = new Date(parseInt(timestamp));\n      // const dd = String(date.getDate()).padStart(2, '0');\n      // const mm = String(date.getMonth() + 1).padStart(2, '0');\n      // const yyyy = date.getFullYear();\n      // return mm + '-' + dd;\n    }\n\n  }\n\n  AssetCardComponent.ɵfac = function AssetCardComponent_Factory(t) {\n    return new (t || AssetCardComponent)();\n  };\n\n  AssetCardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AssetCardComponent,\n    selectors: [[\"asset-chart-card\"]],\n    inputs: {\n      assetChartData: \"assetChartData\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"echarts\", \"\", 1, \"candle-chart\", 3, \"options\"]],\n    template: function AssetCardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"options\", ctx.options);\n      }\n    },\n    directives: [i1.NgxEchartsDirective],\n    styles: [\".candle-chart[_ngcontent-%COMP%]{height:400px;width:800px}\"]\n  });\n  return AssetCardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}